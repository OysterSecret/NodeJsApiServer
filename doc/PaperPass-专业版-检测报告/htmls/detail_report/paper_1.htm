<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN""http://www.w3.org/TR/html4/loose.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<title>PaperPass 最权威论文抄袭检测系统</title>
<style type="text/css">
<!--
user_icon {
color: #FFFFFF;
}
html
{
overflow-x:hidden;
overflow-y:auto;
}
body,td,th {
font-family: "微软雅黑";
font-size: 12px;
}
h1,h2,h3,h4,h5,h6 {
font-family: "宋体";
}
p{
margin-bottom:10px;
}
demo_padding {
line-height: 30px;
}
.zhengwen {
padding-right: 15px;
padding-left: 5px;
padding-bottom:100px;
font-size: 13px;
line-height: 20px;
color: #666666;
}
.zhengwencenter {
padding-right: 15px;
padding-left: 0px;
margin-bottom:10px;
font-size: 13px;
line-height: 20px;
color: #666666;
text-align:center
}
.neikuang {
background-color: #EBEBEB;
border: 1px solid #999999;
padding-right: 10px;
padding-left: 10px;
margin-top:10px;
margin-left:25px;
width:300px;
}
.shubu{
height: 20px;
width: 20px;
margin-left:25px;
background-color: #FFFFFF;
border: 1px solid #999999;
text-align: center;
vertical-align: middle;
display: block;
color: #666666;
}
a.red:link {color:#FF0000}
a.red:visited {color:#FF0000}
a.red:hover {color:#000000}
a.red:active {color:#000000}

a.orange:link {color:#FF6600}
a.orange:visited {color:#FF6600}
a.orange:hover {color:#000000}
a.orange:active {color:#000000}

a.dark:link {color:#666666}
a.dark:visited {color:#666666}
a.dark:hover {color:#000000}
a.dark:active {color:#000000}

a.pagelink:hover {color:#000000}
a.pagelink:active {color:#000000}

.green{color:#008000}
.gray{color:#666666}
.red{color:#FF0000}
.orange{color:#FF6600}
a{TEXT-DECORATION:none}

-->
</style>
</head>
<body>


<div class="zhengwen">
<div>
<span style="margin-left:25px"></span>
[
<a class="pagelink" href="paper_1.htm">首页</a>
<a class="pagelink" href="#">上一页</a>
<a class="pagelink" href="paper_2.htm">下一页</a>
<a class="pagelink" href="paper_8.htm">尾页</a>
页码：1/8页
]
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">1</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>摘 要</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">2</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>在绝大部分企业软件开发中，服务器的设计与开发是必要的一个组成部分，随着企业业务规模的增长，</span><span class='green'>传统的主机服务器方案由于性能瓶颈和价格高昂的原因逐渐不再被业界采纳，基于均衡负载技术的服务器集群成为一种最适用的服务器设计解决方案。</span><span class='green'>然而传统的服务器集群架构存在着模块依赖性强，部署困难，数据库无法支撑高并发访问以及开发周期过长的缺点，</span><span class='green'>使其在工业界仍然无法得到广泛与通用的技术实践。</span><span class='green'>因此本文在传统的服务器集群架构研究基础上，通过以 Docker为代表的轻量级虚拟化技术以及相应的集群管理工具，</span><span class='green'>并利用服务发现与均衡负载器，解决了服务器集群部署与弹性扩增困难的问题。</span><span class='green'>基于NoSQL数据库与Node.js平台，提供了一种高可用、高性能以及高并发的分布式集群解决方案，并以敏捷开发方式实现了标准的Restful API接口。</span><span class='green'>最后，通过对服务器的部署与监控，并基于代码测试和服务器性能分析，表明了本文所述的服务器设计方案可以较好的解决服务器集群部署困难的问题，</span><span class='green'>提高了集群整体的运算性能。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">3</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>关键词：</span><a href='../sentence_detail/11/11.htm' target='right' class='orange' >服务器架构，均衡负载，分布式集群，容器</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">4</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>第一章 绪论</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">5</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/13/13.htm' target='right' class='orange' >现如今，软件开发逐步发展为B/S架构与C/S架构以及其混合发展的三层架构，而不管在何种架构中，服务器都是必须的存在。</a><a href='../sentence_detail/14/14.htm' target='right' class='orange' >自计算机网络出现以来，服务器就是企业软件开发中最为重要的一部分。</a><span class='green'>随着企业用户规模的扩大，单一的主机服务器计算性能增长出现瓶颈，已经无法满足日益增长的用户请求，严重制约了企业的发展，</span><span class='green'>因此，如何开发出具备性能可弹性扩展的服务端架构，也成为业界热门的主要研究方向。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">6</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>自云服务器与云计算 [2-4]的概念提出以来，便成为越来越受欢迎的企业服务器架构。</span><a href='../sentence_detail/18/18.htm' target='right' class='orange' >云计算的模式是从实用计算、自主计算、网格计算和软件即服务（SaaS）[5]的概念发展而来[6]。</a><span class='green'>本质上是一个强大的计算节点集群，通过网络的访问连接、软件和服务的组合来完成计算任务。</span><span class='green'>通过与服务器虚拟化软件相结合的方式实现分布式大型计算集群和并行处理。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">7</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>1.1课题研究现状</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">8</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>1.1.1服务器架构研究进展</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">9</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>早在上个世纪90年代，服务器集群的概念在业内便被提出，</span><a href='../sentence_detail/24/24.htm' target='right' class='orange' > V Cardellini等人[7]对于 web框架中服务器性能瓶颈提出了构建一个可动态扩展的 web服务器集群，</a><span class='green'>通过均衡负载的方式解决计算性能的问题。</span><span class='green'>此后，不断有人提出了新的均衡负载算法及动态扩容的方式[8-10]，如基于IP的均衡负载解决用户session问题，无状态的请求设计及基于节点性能的负载方式等。</span><span class='green'>随着业务的不断扩大，服务层代码依赖过于耦合，难以维护，2005年业界逐渐提出了面向服务架构（ SOA）[11]的服务器设计概念，</span><a href='../sentence_detail/28/28.htm' target='right' class='red' >它可以根据需求通过网络对松散耦合的粗粒度应用组件进行分布式部署、组合和使用。</a><a href='../sentence_detail/29/29.htm' target='right' class='red' >服务层是SOA的基础，可以直接被应用调用，从而有效控制系统中与软件代理交互的人为依赖性。</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">10</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>2011年5月于威尼斯附近举办的一次架构师工作坊讨论中首次提出微服务架构(简称MSA)的概念。</span><a href='../sentence_detail/31/31.htm' target='right' class='red' > MSA是一种分布式系统架构，它建议我们将业务切分为更加细粒度的服务，并使每个服务的责任单一，</a><a href='../sentence_detail/32/32.htm' target='right' class='red' >且可独立部署，服务内部高内聚，隐含内部细节，服务之间低耦合，彼此相互隔离，</a><span class='green'>2014年3月， Martin Fowler发表的 Microservices一文[12]真正为 MSA这一架构风格在业界正名，</span><span class='green'>也正是此文让业界对微服务有具体的认识。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">11</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>然而服务器架构由于部署困难的问题，一直无法很好的用于构建服务器集群，但随着以VMWARE公司为代表的虚拟化技术的发展，业界Trieu C.</span><span class='green'>Chieu[13]等人通过预先编写的虚拟机镜像，从而可以自动化地部署新的虚拟机实例，实现虚拟化的云服务器环境，</span><span class='green'>完成对服务集群的自动弹性扩展，以此便捷的构建 MSA架构的服务端。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">12</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>2015年后，Red Hat公司提出以Docker为代表的容器（Container）技术[14-15]，在社区上受到热烈欢迎并且迅速发展，容器技术为应用程序提供了隔离的运行空间：</span><a href='../sentence_detail/39/39.htm' target='right' class='red' >每个容器内都包含一个独享的完整用户环境空间，并且一个容器内的变动不会影响其他容器的运行环境。</a><span class='green'>通过容器彻底解决了微服务部署的问题，实现了高可扩展性的微服务架构的服务器部署[16]，</span><a href='../sentence_detail/41/41.htm' target='right' class='orange' >并且通过容器管理技术，更为方便地实现了对服务器集群的构建与均衡负载[17]。</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">13</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>1.1.2服务器基本架构</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">14</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>广义上的服务器集群结构基本类似，大体上由一个均衡负载器，一系列的处理服务器节点，一个数据库池组成。</span><span class='green'>对于具备动态扩容的服务器集群，通常还有一个配置子系统与服务发现子系统，并有一个定义的扩容算法所组成，见图1-1所示：</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">15</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>均衡负载器作为整个服务端的入口，接收用户的服务请求，并将请求按一定均衡负载算法分发给一系列的处理服务器集群节点完成请求的处理，</span><span class='green'>所有处理服务器节点共享一个数据库池，完成对数据的增删查改的需求，最后将处理结果返回给用户。</span><span class='green'>配置子系统实现了处理服务节点的自动化启动与配置，服务发现子系统完成对新启动的服务与不可用服务的探查，</span><span class='green'>并将其加入到集群网络或将其从集群网络中剔除。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">16</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>1.1.3服务器集群的特点</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">17</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>（1）可弹性伸缩性:</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">18</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>服务器集群规模可以弹性扩容，根据资源需求可以随时加入或删除计算节点以扩增集群规模，增大服务集群的计算能力，以服务更大规模的用户数目，完成更大数量的服务请求。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">19</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>（2）高有效性与高可用性:</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">20</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>服务器集群中各个集群主机不会互相影响，独立工作，即使有部分主机发生冗机情况，</span><span class='green'>中心将自动地把不可用主机从集群网络中剔除，剩余主机的运作不会受到影响，</span><a href='../sentence_detail/55/55.htm' target='right' class='orange' >仍能正常处理用户的服务请求，仅造成服务器计算能力的降低。</a><span class='green'>并且集群调度中心将会尝试重新启动发生错误的主机，待其恢复功能后重新加入集群网络，以恢复集群的正常运行。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">21</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>（3）服务高性价比:</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">22</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>服务器集群可以通过集群网络的方式将一系列不同型号、标准的廉价硬件设施组成一个高可用、高性能的计算中心，</span><span class='green'>代替了以往价格高昂的单一大型计算主机。</span><span class='green'>并且可以轻松地更新、维护集群中任意主机节点，在同等计算性能下，达到了很高的性价比。</span><a href='../sentence_detail/61/61.htm' target='right' class='orange' >在现今流行的SaaS企业云平台更进一步降低了服务器集群的使用与维护成本。</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">23</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>（4）动态负载平衡:</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">24</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>为了保证系统中所有资源可以得到充分的利用，</span><a href='../sentence_detail/64/64.htm' target='right' class='orange' >服务器集群通常具备一个均衡负载器将用户请求根据一定的均衡算法将请求平衡地转发给集群中的节点处理，</a><span class='green'>从而尽可能地让不同性能的计算节点都能最大程度的利用其性能资源。</span><a href='../sentence_detail/66/66.htm' target='right' class='orange' >并且可以通过监控服务集群中所有处理服务节点的负载健康状态，动态地改变调度情况。</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">25</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>1.2课题研究意义</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">26</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>由于服务器需要处理大量的用户服务访问请求，因此如何设计实现一个符合自身业务需求的服务器架构是一个最根本的问题。</span><span class='green'>相较于传统的单一主机服务器计算性能有效和价格昂贵的特性，云服务器通过大量主机构成集群网络，</span><a href='../sentence_detail/70/70.htm' target='right' class='orange' >实现可伸缩性、高有效性、高可用性，通过均衡负载完成对系统硬件资源最为有效的利用。</a><span class='green'>使用物理主机构建集群由于环境原因十分困难，并且资源受到限制，采用基于虚拟机的虚拟化技术则对资源开销过大，</span><span class='green'>使用容器技术对 MSA架构的服务器集群进行部署在业内则属于刚刚兴起的热门研究方向。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">27</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>通过对服务端架构的研究，开展自来水生产运行维护平台服务器端架构设计，从而满足服务器数据处理、存储平台规模可扩展，</span><span class='green'>服务端集群计算能力能随着业务量的扩张而弹性扩展的需求，实现对大量并发访问请求的处理，</span><a href='../sentence_detail/75/75.htm' target='right' class='orange' >解决服务器无法同时满足不同类型客户端请求的问题。</a><span class='green'>合适的服务器架构可以降低企业的维护成本，方便地满足企业业务，适应企业用户规模的增长，因此，对服务器架构的研究具有重要的意义。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">28</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>1.3内容安排</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">29</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>本课题其它内容安排如下：</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">30</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>（1）第二章介绍云服务器集群技术，主要包括容器技术、容器管理工具、服务发现及均衡负载等；</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">31</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>（2）第三章介绍数据库池设计，主要包括设计MongoDB数据库集群、Redis缓存；</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">32</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>（3）第四章介绍处理服务器实现，主要包括介绍基于Node.js实现OAuth2.0协议和Restful 接口；</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">33</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>（4）第五章介绍集群配置与性能分析，主要包括服务器集群和数据库集群的容器配置和集群负载性能分析；</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">34</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>（5）最后几部分是结束语、致谢、参考文献和附录。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">35</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>第二章 云服务器集群</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">36</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>2.1 容器技术</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">37</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/86/86.htm' target='right' class='orange' >容器技术是目前实现微服务架构服务器最佳的选择之一。</a><a href='../sentence_detail/87/87.htm' target='right' class='red' >通过将应用（微服务）以及依赖包发布到一个可移植的容器中，然后Pull到任何主流的 Linux 机器上实现服务的虚拟化。</a><a href='../sentence_detail/88/88.htm' target='right' class='red' >容器完全使用沙盒机制，不依赖于任何语言、框架以及操作系统。</a><a href='../sentence_detail/89/89.htm' target='right' class='red' >基于容器封装应用（微服务），并与经过优化的强大基础架构相结合，使经过认证的应用能够在裸机系统、虚拟机和私有或公共云之间轻松部署。</a><a href='../sentence_detail/90/90.htm' target='right' class='red' >容器技术和虚拟机的功能有些相似，但性能相差很大。</a><a href='../sentence_detail/91/91.htm' target='right' class='red' >与虚拟机相比，容器技术通常可以在1秒内启动，而虚拟机启动加上应用系统的启动时间要长得多，且资源利用率高。</a><a href='../sentence_detail/92/92.htm' target='right' class='red' >另外，容器性能开销小，虚拟机通常需要额外的 CPU和内存来完成 OS的功能，这一部分占据了额外的计算资源，</a><span class='green'>对于服务器集群来说不具备高性价比，以下图2-1为传统的 VM技术与容器技术的区别，</span><span class='green'>左为 VM技术架构，右为容器技术架构：</span>
</p>
</div>


<div>
<span style="margin-left:25px"></span>
[
<a class="pagelink" href="paper_1.htm">首页</a>
<a class="pagelink" href="#">上一页</a>
<a class="pagelink" href="paper_2.htm">下一页</a>
<a class="pagelink" href="paper_8.htm">尾页</a>
页码：1/8页
]
</div>

<br>
<div style="margin-left:8px">

<div style="text-align:center;background-color:#CA122C;margin-top:30px;overflow:hidden;">
<a href="http://www.paperpass.com/publish/index?from=ppreport_banner" target="_blank" style="display:block;"><img height="180" src="http://file.paperpass.com/images/fabiao.jpg"></a>
</div>

</div>
</div>


<div class="zhengwencenter">
<p>
检测报告由<a href="http://www.paperpass.com/" target="_blank">PaperPass</a>文献相似度检测系统生成
</p>
<p>
Copyright © 2007-2017 PaperPass
</p>
</div>
<div style="margin-bottom:400px"></div>
</body>
</html>
